---
title: "County-Level Aggregation of Local Recharge Layers"
---

# Objective:
+ For each country, calculated the area-weighted average of local recharge (L.tif) from all watersheds within the country.


# Setup

```{r}
library(here)
i_am("Scr/Code/4_Country_L_values.qmd")

# /*===== Load R packages =====*/
library(data.table)
library(dplyr)

library(ggplot2)
library(tidyterra)

library(exactextractr)
library(terra)
library(sf)


# /*===== Path configurations =====*/
source(here("Scr/Code/0_path_config.R"))
```

# Data Prerequisites

```{r}

# /*===== L Layer =====*/
l_glb <- rast(file.path(final_dir, "l_aligned/l_aligned_global.tif"))

# Replace negative values with zero
# Negative values means that that cell is not contributing to recharge or baseflow generation.
l_glb_nonneg <- clamp(l_glb, lower = 0, upper = 1000)

# plot(l_glb_nonneg)

# /*===== Country Boundary =====*/
ctry_bd <- 
  st_read(here(raw_dir, "z_ee_r250_correspondence.gpkg")) %>%
  select(iso3_r250_id, iso3_r250_label, iso3_r250_name, continent) %>%
  st_transform(crs(l_glb)) %>%
  filter(!continent %in% c("Antarctica",  "Seven seas (open ocean)" )) %>%
  mutate(
    region = case_when(
      continent == "Africa" ~ "af",
      continent == "Asia" ~ "as",
      continent == "Oceania" ~ "au",
      continent == "Europe" ~ "eu",
      continent == "North America" ~ "na",
      continent == "South America" ~ "sa"
    )
  ) %>%
  st_transform(., crs = crs(l_glb, proj = TRUE))


ctry_dt <- 
  st_drop_geometry(ctry_bd) %>%
  data.table()

# /*===== Major Groundwater =====*/
gw_basins_sf <- 
    st_read(file.path(raw_dir, "h2wjr-te507/shapefiles/All_merged.shp")) %>%
    filter(WHYClass == 10) %>%
    st_transform(st_crs(ctry_bd))

# /*===== Watershed =====*/
# valid watersheds
swy_status_dt <- 
  list.files(
    file.path(final_dir, "SWY"),
    pattern = "^x_output_status_.*\\.rds$",
    full.names = TRUE
  ) %>%
  lapply(readRDS) %>%
  rbindlist() %>%
  .[success == TRUE,]

hybas_sf <- 
  readRDS(file.path(int_dir, "case_hybas_tbl_sf.rds")) %>%
  tidyr::unnest(cols = "tg_hybas_sf") %>%
  st_as_sf() %>%
  filter(HYBAS_ID %in% swy_status_dt$hybas_id) %>%
  select(region = region_abbr, hybas_id = HYBAS_ID) %>%
  st_transform(st_crs(ctry_bd))


# Plot GW basisns, hybas, country boundaries 
# ggplot() + 
#   geom_sf(data = ctry_bd, fill = NA, color = "black") +
#   geom_sf(data = gw_basins_sf, fill = "blue", color = NA) +
#   geom_sf(data = hybas_sf, fill = "lightblue", color = "black", alpha = 0.5) +
#   theme_void()
```


# Process

+ Country boundaries (vector)
+ Local recharge layers (L.tif) for each watershed
+ l layers for each continental region (raster)

+ Create a table that contains the following columns:
  + country information (iso3_r250_id, iso3_r250_label, iso3_r250_name)
  + region
  + average recharge value (mm/year)
    + area-weighted average of L from all watersheds within the country

## By Country
```{r}

# /*===== With country boundary =====*/
raw_l_val_dt_ctry <- 
  exact_extract(
    l_glb_nonneg, 
    ctry_bd, 
    include_cols = "iso3_r250_id"
  ) %>%
  rbindlist()


l_val_dt_ctry <- 
  raw_l_val_dt_ctry %>%
  .[!is.na(value), ] %>%
  .[, .(
    l_mean_mm = weighted.mean(value, coverage_fraction, na.rm = TRUE)
    # l_mean_mm_copy = sum(value * coverage_fraction, na.rm = TRUE) / sum(coverage_fraction),
    # l_sum_mm = sum(value * coverage_fraction, na.rm = TRUE)
    ), by = iso3_r250_id
  ] %>%
  merge(., ctry_dt, by = "iso3_r250_id", all.x = TRUE)

summary(l_val_dt_ctry$l_mean_mm)

l_val_dt_ctry[iso3_r250_label == "AUS"]

# === Save === #
saveRDS(
  l_val_dt_ctry,
  file.path(final_dir, "l_val_dt_ctry.rds")
)


# === Map === #
l_val_dt_ctry_sf <- 
  merge(
    ctry_bd,
    l_val_dt_ctry[, .(iso3_r250_id, l_mean_mm)],
    by = "iso3_r250_id",
    all.x = TRUE
  )

ggplot() + 
  geom_sf(
    data = l_val_dt_ctry_sf, 
    aes(fill = l_mean_mm), color = "black"
  ) +
  scale_fill_viridis_c()
```


## By Watersheds

## Identify which watersheds belong to which country

```{r}
hybas <- st_make_valid(hybas_sf)
ctry  <- st_make_valid(ctry_bd)

# /*===== Check =====*/
# sum(!st_is_valid(hybas))
# sum(!st_is_valid(ctry))

# miss <- st_join(
#   hybas %>% select(hybas_id),
#   ctry   %>% select(iso3_r250_id),
#   join = st_intersects,
#   left = TRUE
# ) %>%
#   filter(is.na(iso3_r250_id)) %>%
#   pull(hybas_id)

# length(miss) # how many dropped?
# head(miss) # sample IDs


# /*===== st_interserct() =====*/
hybas <- st_set_precision(hybas, 1) %>% st_make_valid()
ctry  <- st_set_precision(ctry,  1) %>% st_make_valid()

# sf_use_s2(TRUE)

hybas_ctry <- 
  st_intersection(
    hybas, 
    select(ctry, !"region")
  )

hybas_ctry_poly <- 
  hybas_ctry %>%
  st_collection_extract("POLYGON") %>%
  filter(!st_is_empty(geometry), as.numeric(st_area(.)) > 0) %>%
  st_transform(crs = terra::crs(l_glb_nonneg, proj=TRUE))
```



```{r}
# /*===== With watershed boundary =====*/
raw_l_val_dt_hybas <- 
  exact_extract(
    l_glb_nonneg, 
    st_transform(hybas_sf, crs(l_glb_nonneg)), 
    include_cols = "hybas_id"
  ) %>%
  rbindlist()

l_val_dt_hybas <- 
  raw_l_val_dt_hybas %>%
  # .[!is.na(value), ] %>%
  .[, .(
    # l_mean_mm = weighted.mean(value, coverage_fraction, na.rm = TRUE)
    l_mean_mm_copy = sum(value * coverage_fraction, na.rm = TRUE) / sum(coverage_fraction)
    # l_sum_mm = sum(value * coverage_fraction, na.rm = TRUE)
    ), by = hybas_id
  ]

# summary(l_val_dt_hybas$l_mean_mm)
```