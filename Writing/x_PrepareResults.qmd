---
title: "Prepare Results for Writing"
---

# Object:
+ Prepare maps and data tables for final results writing.

# Setup
```{r}
#| label: prep-setup
library(here)
i_am("Scr/Writing/x_PrepareResults.qmd")

# /*===== Load R packages =====*/
library(RefManageR)

library(data.table)
library(dplyr)
library(tibble)
library(dplyr)
library(magrittr)

library(terra)
library(sf)

library(tidyterra)

library(ggplot2)
library(ggthemes)
library(grid)      # for margin()
library(gridExtra)
library(scico)
library(ggokabeito)
library(viridis)
# library(ggpubfigs)
library(scattermore)
library(gganimate)
library(patchwork)
library(ggtext)
library(stringr)

library(gridExtra)
library(ggpubr)

theme_update(text = element_text(family = "Times New Roman"))


library(officer)
library(flextable)
set_flextable_defaults(font.family = "Times New Roman")


# /*===== Base path configurations =====*/
source(here("Scr/Code/0_path_config.R"))

```


# ggplot Theme
```{r}
#| label: prep-define-ggplot-themes

  # or your font


theme_plot <-
  theme_bw() +
  theme(
    legend.position = "bottom",
    axis.text = element_text(size = 14),
    axis.title = element_text(size = 16),
    legend.text = element_text(size = 14),
    legend.key.width = unit(2, "cm"),
    axis.title.x = element_text(vjust = -1),
    axis.title.y = element_text(vjust = 2),
    strip.text = element_text(size = 14),
    plot.title = element_text(hjust = 0.5),
    # text = element_text(family = "Times New Roman"),
    # --- Footnote --- #
    plot.caption = element_textbox_simple(hjust=0, size = 12)
  )


theme_map_facet <- 
  theme(
    legend.position = "bottom",
    legend.text = element_text(size = 14),
    legend.key.width = unit(2, "cm"),
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    axis.text.x=element_blank(),
    axis.ticks.x=element_blank(),
    axis.text.y=element_blank(),
    axis.ticks.y=element_blank(),
    strip.text = element_text(size = 14),
    plot.title = element_text(hjust = 0.5),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    # text = element_text(family = "Times New Roman"),
    # --- Footnote --- #
    plot.caption = element_textbox_simple(hjust=0, size = 12)
    # --- Padding --- #
  )

theme_facet <- 
  theme(
    legend.position = "bottom",
    legend.text = element_text(size = 14),
    legend.key.width = unit(2, "cm"),
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    axis.text.x=element_blank(),
    axis.ticks.x=element_blank(),
    axis.text.y=element_blank(),
    axis.ticks.y=element_blank(),
    strip.text = element_text(size = 14),
    plot.title = element_text(hjust = 0.5),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    # text = element_text(family = "Times New Roman"),
    # --- Footnote --- #
    plot.caption = element_textbox_simple(hjust=0, size = 12)
    # --- Padding --- #
  )
```



# Data Prerequisites
```{r}
#| label: prep-data-for-results-maps

# /*===== Watershed Boundary =====*/
hybas_sf <- 
  readRDS(file.path(int_dir, "hybas_region_tbl.rds")) %>%
   st_transform(crs = 4326)




# /*===== Major Groundwater =====*/
# gw_basins_sf <- 
#     st_read(file.path(raw_dir, "h2wjr-te507/shapefiles/All_merged.shp")) %>%
#     filter(WHYClass == 10) %>%
#     st_transform(st_crs(hybas_sf))

# ggplot() + 
#   geom_sf(data = gw_basins_sf, aes(fill = WHYClass), color = "black")

# /*===== Country Boundary =====*/
ctry_bd <- 
  readRDS(file.path(int_dir, "ctry_region_boundary.rds")) %>%
  st_transform(crs = st_crs(hybas_sf))

# ggplot() + 
#   geom_sf(data = ctry_bd, aes(fill = region), color = "black")
# filter(ctry_bd, iso3_r250_label == "SAU")


# /*===== GEP Results =====*/
gep_tbl <-
  fread(file.path(final_dir, "ground_water_gep.csv"))

```

# GEP Map

```{r}
#| eval: false
ctry_gep_sf <-
  merge(
    ctry_bd, gep_tbl,
    by.x = "iso3c", by.y = "iso3_r250_label",
    all.x = TRUE
  )

fig_map_gep <- 
  ggplot() + 
  geom_sf(
    data = ctry_gep_sf,
    aes(fill = ground_water_gep), color = "black",
    linewidth = 0.2
  ) +
  geom_sf(
    data = filter(ctry_gep_sf, is.na(ground_water_gep)),
    fill = "lightgrey", linewidth = 0.2
  ) +
  theme_void() +
  labs(fill = "USD") +
  scale_fill_viridis_c() +
  theme(
    # legend.position = "bottom",
    legend.text = element_text(size = 9, family = "Times New Roman"),

    # put caption at plot edge (default), then add space above it
    plot.caption.position = "plot",
    plot.caption = element_textbox_simple(
      hjust = 0, size = 9,
      margin = margin(t = 8), # space between figure and caption
      family = "Times New Roman"
    ),
    # optional: add some bottom breathing room outside the plot area
    plot.margin = margin(t = 5, r = 5, b = 10, l = 5)
  ) +
  labs(
    caption = "Note: The figure shows estimated Groundwater Ecosystem Product (GEP) values by country in 2019, expressed in constant USD. GEP is calculated as the monetary value of natural groundwater recharge, combined with the unit cost of groundwater extraction. Groundwater withdrawal data are from the FAO AQUASTAT Core Database (FAO, 2019). Country-level electricity prices in 2019 are used to approximate pumping energy costs. Countries shown in light grey indicate insufficient data on groundwater withdrawal and/or electricity prices. Estimates reflect direct-use value only."
  )

ggsave(
  filename = here("Scr/Writing/z_figures/gep_map.png"),
  plot = fig_map_gep,
  width = 8,       # in inches
  height = 5,
  dpi = 300
)
```




# Global Watershed laying over the Major Groundwater Basins

```{r}
#| eval: false
#| label: prep-fig-map-tg-watershed

# /*===========================================*/
#'=  Create a .png image of Global Watershed Boundaries (Run once) =
# /*===========================================*/

legend_font_size <- 7
footnote_font_size <- 6

fig_map_tg_watershed <-
  ggplot() + 
    geom_sf(data = ctry_bd, fill = NA, color = "black") +
    geom_sf(data = hybas_sf, aes(fill = "Watersheds"), lwd = 0.01) + 
    scale_fill_manual(
      name = "",
      values = c("Watersheds" = "lightblue")
    ) +
  theme_void() +
  theme(
    legend.position = "bottom",
    legend.text = element_text(size = 9, family = "Times New Roman"),

    # put caption at plot edge (default), then add space above it
    plot.caption.position = "plot",
    plot.caption = element_textbox_simple(
      hjust = 0, size = 9,
      margin = margin(t = 8), # space between figure and caption
      family = "Times New Roman"
    ),

    # optional: add some bottom breathing room outside the plot area
    plot.margin = margin(t = 5, r = 5, b = 10, l = 5)
  ) +
  labs(
    caption = "Note: The figure shows the boundaries of watersheds used in the analysis. These watersheds are defined based on HydroBASINS Level 6 from HydroSHEDS v1 (Lehner and Grill 2013). Only watersheds that intersect at least 20 percent of grid cells with strictly positive groundwater withdrawals. In total, 11,528 watersheds globally that meet this criterion."
  )

ggsave(
  filename = here("Scr/Writing/z_figures/fig_map_tg_watershed.png"),
  plot = fig_map_tg_watershed,
  width = 8,       # in inches
  height = 5,
  dpi = 300
)
```


# Global Local Recharge Layer (Don't run)

```{r}
#| eval: false
# /*===========================================*/
#'=  Load an entire L layer =
# /*===========================================*/
l_glb <- rast(file.path(final_dir, "l_aligned/l_aligned_global.tif"))

l_glb <- clamp(l_glb, lower = 0, upper = 1000)

ggplot() +
    geom_spatraster(
      data = l_glb,
      # maxcell = 5e+05, # default
      maxcell = 5e+06
    ) +
    scale_fill_whitebox_c(
      palette = "muted",
      n.breaks = 5, na.value = NA,
      name = ""
      # labels = scales::label_number(suffix = "mm")
    )
```

# Loading Local Recharge Layers by Region
```{r}
#| eval: false

# /*===========================================*/
#'=  Load by region =
# /*===========================================*/
ls_regions <- unique(hybas_sf$region)
ls_l_lyrs_r <- list()

for (r in ls_regions){
  # r = "na"
  message("Loading L layer for region: ", r)
  tmp_l <- 
    rast(file.path(final_dir, "l_aligned", paste0("l_aligned_", r, ".tif")))

  # ls_l_lyrs_r[[r]] <- tmp_l
  ls_l_lyrs_r[[r]] <- clamp(tmp_l, lower = 0, upper = 1000)
}


# plot(ls_l_lyrs_r[["as"]])

```

# Preparing continent-specific L maps

```{r}
#/*--------------------------------*/
#' ## Function to plot boundaries and L layer
#/*--------------------------------*/
fn_plot_l_lyr_r <- function(bd, l_lyr_r){
  ggplot() +
    geom_spatraster(
      data = l_lyr_r,
      # maxcell = 5e+05, # default
      maxcell = 5e+06
    ) +
    scale_fill_whitebox_c(
      palette = "muted",
      n.breaks = 5, na.value = NA,
      name = ""
      # labels = scales::label_number(suffix = "mm")
    ) +
    geom_sf(
      data = bd,
      fill = "NA", lwd = 0.1
    ) +
    theme_void() +
    theme(
      legend.position = "bottom",
      # plot.title = element_text(hjust = 0.5),
      legend.key.width = unit(1, "cm"),
      legend.text = element_text(size = 9, family = "Times New Roman"),
      plot.title = element_text(
      family = "Times New Roman")
    )
}

#/*--------------------------------*/
#' ## Centering the continent map
#/*--------------------------------*/
correct_ctry_bd <- function(bd) {

  bd_correct <-
    st_wrap_dateline(
      bd,
      options = c("WRAPDATELINE=YES", "DATELINEOFFSET=180"),
      quiet = TRUE
    ) %>%
    st_shift_longitude(.)

  # ggplot() + geom_sf(data = ctry_bd_r)

  return(bd_correct)
}

```

## Preparing continent-specific L data
```{r}
#| eval: false

ls_data_l_lyr_r <- list()

#/*--------------------------------*/
#' ##  EU (okay)
#/*--------------------------------*/
ctry_bd_eu <- filter(ctry_bd, region == "eu")
hybas_eu <- filter(hybas_sf, region == "eu")

# st_bbox(ctry_bd_eu)
# ggplot() + 
#   geom_sf(data = hybas_eu, fill = "lightblue", color = NA) +
#   geom_sf(data = ctry_bd_eu, fill = NA)

bb <- 
  st_bbox(
    # c(xmin = -50, ymin = 20, xmax = 70, ymax = 82.30556),
    c(xmin = -50, ymin = 20, xmax = 70, ymax = 71),
    crs = st_crs(ctry_bd_eu)
  ) %>%
  st_as_sfc() %>%
  st_as_sf()

# ggplot() + 
#   geom_sf(data = bb, fill = "lightblue", color = NA) +
#   geom_sf(data = ctry_bd_eu, fill = NA, color = "black")

sf_use_s2(FALSE)
ctry_bd_eu_crop <- st_crop(ctry_bd_eu, st_bbox(bb))
sf_use_s2(TRUE)


# Remove geometry collection
is_gc <- st_geometry_type(ctry_bd_eu_crop) == "GEOMETRYCOLLECTION"
ctry_bd_eu_crop <- ctry_bd_eu_crop[!is_gc, ]

# table(st_geometry_type(ctry_bd_eu_crop))

ctry_bd_eu_crop_disag <- 
  disagg(vect(ctry_bd_eu_crop)) %>%
  st_as_sf()


# Select countries that intersect with watersheds
ctry_bd_eu_sel <- ctry_bd_eu_crop_disag[hybas_eu, ]

# ggplot() + 
#   geom_sf(data = hybas_eu, fill = "lightblue", color = NA) +
#   geom_sf(data = ctry_bd_eu_sel, fill = NA)

# --- L layer --- #
l_lyr_eu <- ls_l_lyrs_r[["eu"]]
# plot(l_lyr_r)

# Crop L layer to continent extent
l_lyr_eu_crop <- crop(l_lyr_eu, vect(ctry_bd_eu_sel), mask = TRUE)

# fn_plot_l_lyr_r(bd = ctry_bd_eu_sel, l_lyr_r = l_lyr_eu_crop)

ls_data_l_lyr_r[["eu"]] <- list(bd = ctry_bd_eu_sel, l_lyr = l_lyr_eu_crop)

#/*--------------------------------*/
#' ## Asia (okay)
#/*--------------------------------*/
ctry_bd_as <- filter(ctry_bd, region == "as")
hybas_as <- filter(hybas_sf, region == "as")

ctry_bd_as_sel <- ctry_bd_as[hybas_as, ]

# ggplot() + 
#   geom_sf(data = hybas_as, fill = "lightblue", color = NA) +
#   geom_sf(data = ctry_bd_as_sel, fill = NA)

l_lyr_as <- ls_l_lyrs_r[["as"]]

# fn_plot_l_lyr_r(bd = ctry_bd_as_sel, l_lyr_r = l_lyr_as)

ls_data_l_lyr_r[["as"]] <- list(bd = ctry_bd_as_sel, l_lyr = l_lyr_as)

#/*--------------------------------*/
#' ## Africa (okay)
#/*--------------------------------*/
ctry_bd_af <- filter(ctry_bd, region == "af")
hybas_af <- filter(hybas_sf, region == "af") %>% st_make_valid()

# table(st_geometry_type(hybas_af))

ctry_bd_af_sel <- ctry_bd_af[hybas_af, ]

# ggplot() + 
#   geom_sf(data = hybas_as, fill = "lightblue", color = NA) +
#   geom_sf(data = ctry_bd_as_sel, fill = NA)

l_lyr_af <- ls_l_lyrs_r[["af"]]

# fn_plot_l_lyr_r(bd = ctry_bd_af_sel, l_lyr_r = l_lyr_af)

ls_data_l_lyr_r[["af"]] <- list(bd = ctry_bd_af_sel, l_lyr = l_lyr_af)

#/*--------------------------------*/
#' ## Oceania (okay)
#/*--------------------------------*/
ctry_bd_au <- correct_ctry_bd( filter(ctry_bd, region == "au"))
hybas_au <- filter(hybas_sf, region == "au")

# ggplot() + 
#   geom_sf(data = hybas_au, fill = "lightblue", color = NA) +
#   geom_sf(data = ctry_bd_au, fill = NA, color = "black")

ctry_bd_au_sel <- ctry_bd_au[hybas_au, ]

l_lyr_au <- ls_l_lyrs_r[["au"]]

# fn_plot_l_lyr_r(bd = ctry_bd_au_sel, l_lyr_r = l_lyr_au)

ls_data_l_lyr_r[["au"]] <- list(bd = ctry_bd_au_sel, l_lyr = l_lyr_au)

#/*--------------------------------*/
#' ## North America
#/*--------------------------------*/
ctry_bd_na <- filter(ctry_bd, region == "na")
hybas_na <- filter(hybas_sf, region == "na")

# table(st_geometry_type(hybas_na))

# ggplot() + 
#   geom_sf(data = hybas_na, fill = "lightblue", color = NA) +
#   geom_sf(data = ctry_bd_na, fill = NA, color = "black")

# ggplot() + geom_sf(data = filter(ctry_bd_na, iso3c == "USA"), fill = NA, color = "black")

ctry_bd_na_disag <- 
  disagg(vect(ctry_bd_na)) %>%
  st_as_sf()

# ggplot() + 
#   geom_sf(data = ctry_bd_na_disag, fill = NA, color = "black")

# table(st_geometry_type(ctry_bd_na_disag))


ctry_bd_na_sel <- ctry_bd_na_disag[hybas_na, ]

# ggplot() + 
#   geom_sf(data = hybas_na, fill = "lightblue", color = NA) +
#   geom_sf(data = ctry_bd_na_sel, fill = NA, color = "black")

l_lyr_na <- ls_l_lyrs_r[["na"]]

# fig_map_l_lyr_au <- fn_plot_l_lyr_r(bd = ctry_bd_au_sel, l_lyr_r = l_lyr_au)

ls_data_l_lyr_r[["na"]] <- list(bd = ctry_bd_na_sel, l_lyr = l_lyr_na)


#/*--------------------------------*/
#' ## South America
#/*--------------------------------*/
ctry_bd_sa <- filter(ctry_bd, region == "sa")
hybas_sa <- filter(hybas_sf, region == "sa") %>% st_make_valid()

ctry_bd_sa_sel <- ctry_bd_sa[hybas_sa, ]

l_lyr_sa <- ls_l_lyrs_r[["sa"]]

fig_map_l_lyr_sa <- fn_plot_l_lyr_r(bd = ctry_bd_sa_sel, l_lyr_r = l_lyr_sa)

ls_data_l_lyr_r[["sa"]] <- list(bd = ctry_bd_sa_sel, l_lyr = l_lyr_sa)
```

# Map of Local Recharge by Continent
```{r}
#| eval: false
# /*===========================================*/
#'=  Preparation =
# /*===========================================*/
ls_fig_map_l_r <- list()

for(r in unique(hybas_sf$region)){
  # r = "na"
  message("Creating L map for region: ", r)
  tmp_bd <- ls_data_l_lyr_r[[r]]$bd
  tmp_l_lyr <- ls_data_l_lyr_r[[r]]$l_lyr
  
  tmp_fig_map_l_r <- fn_plot_l_lyr_r(bd = tmp_bd, l_lyr_r = tmp_l_lyr)
  
  ls_fig_map_l_r[[r]] <- tmp_fig_map_l_r
}


p_af <- ls_fig_map_l_r[["af"]] + labs(title = paste0("(A) Africa")) 
p_as <- ls_fig_map_l_r[["as"]] + labs(title = paste0("(B) Asia")) 
p_au <- ls_fig_map_l_r[["au"]] + labs(title = paste0("(C) Oceania"))

p_eu <- ls_fig_map_l_r[["eu"]] + labs(title = paste0("(D) Europe"))
p_na <- ls_fig_map_l_r[["na"]] + labs(title = paste0("(E) North America"))
p_sa <- ls_fig_map_l_r[["sa"]] + labs(title = paste0("(F) South America"))
```

```{r}
#| eval: false
# /*===========================================*/
#'=  Create Maps=
# /*===========================================*/
p_af + p_as + p_au + p_eu + p_na + p_sa +
plot_layout(ncol = 3, widths = c(2, 2, 2)) +
  plot_annotation(
    caption = "Note: The figures show local recharge, in mm, by continent. This figure was created by combining raster layers of local recharge of watersheds within each continent. Black lines indicate country boundaries, and only countries that intersect with the watersheds in each continent are shown.",
    theme = theme(
      plot.caption = element_textbox_simple(
        hjust = 0, size = 10,
        margin = margin(t = 8, r = 6, b = 2, l = 6)
      ),
       text = element_text(family = "Times New Roman"),
      )
  ) +
  plot_layout(widths = c(3, 3, 3))
  # plot_layout(
  #   guides = "collect"
  # ) & 
  # theme(plot.margin = unit(c(0, 0.5, 1, 0.5), "cm"))
  

ggsave(
  filename = here("Scr/Writing/z_figures/local_recharge_by_region.png"),
  width = 10,       # in inches
  height = 8,
  dpi = 300
)

```



```{r}
#| label: prep-fig-map-l-r
#| eval: false


ls_l_layers <- list()

for (r in ls_regions){
  # r = "na"
  tmp_l <- 
    rast(file.path(final_dir, "l_aligned", paste0("l_aligned_", r, ".tif")))
  ls_l_layers[[r]] <- tmp_l
  # ls_l_layers[[r]] <- clamp(tmp_l, lower = 0, upper = 1000)
}



# ctry_bd_wgs84 <- 
#   st_transform(ctry_bd, crs = st_crs(ls_l_layers[[1]]))

r = "au"
tg_l_layer <- ls_l_layers[[r]]
ggplot() +
  geom_spatraster(
    # data = ls_l_layers
    data = tg_l_layer,
  ) +
   scale_fill_whitebox_c(
    name = "Local Recharge (mm)",
    palette = "muted",
    n.breaks = 5,
    na.value = NA
  ) +
  


summary(values(tg_l_layer), na.rm = TRUE)


# /*===========================================*/
#'= Local Recharge Map by Continent =
# /*===========================================*/
tg_r <- "na"

ctry_bd_crop <- 
  st_intersects(
    ctry_bd,
    ext(ls_l_layers[[tg_r]])
  )



fig_map_l_r <- 
  ggplot() + 
  geom_sf(
    data = filter(ctry_bd_wgs84_crop, region == tg_r),
    fill = NA, color = "black"
  ) + 
  geom_spatraster(
    data = ls_l_layers[[tg_r]],
  ) +
  scale_fill_viridis_c(
    name = "Local Recharge (mm)",
    na.value = NA
  ) +
  theme_void() +
  labs(
    title = paste0("Local Recharge in ", toupper(tg_r), " Region")
  ) +
  theme(
    legend.position = "right",
    plot.title = element_text(hjust = 0.5)
  )
```


# Table: Data Sources for InVEST SWY model
```{r}
#| label: prep-data-source

df <- tribble(
  ~invest_input_name,               ~source,                                                                                      ~note,
  "Area of Interest",               "HydroBASINS Level 6 from HydroSHEDS v1 (Lehner and Grill, 2013)",                           "Groundwater withdrawal data (Nazari et al., 2025) will be also used to select watersheds of interest.",
  "Digital Elevation Model (DEM)",  "Void-filled DEM from HydroSHEDS v1 (Lehner et al., 2008)",                                   "",
  "Land Use / Land Cover (LULC)",   "ESA CCI Land Cover (https://planetarycomputer.microsoft.com/dataset/esa-cci-lcc)",          "",
  "Soil Hydrologic Group",          "HYSOGs250m v1 (Ross et al., 2018)",                                                          "",
  "Monthly precipitation",          "AgERA5 daily precipitation (Copernicus Climate Change Service, 2019)",                       "Aggregated to monthly by watershed; used for monthly alpha table and precipitation events by climate zone.",
  "Monthly reference ET0",          "AgERA5 daily Penman–Monteith ET0 (Copernicus Climate Change Service, 2019)",                 "Aggregated to monthly by watershed.",
  "Climate zone map",               "Köppen–Geiger 1991–2020 (Beck et al., 2022)",                                                "Used to estimate precipitation event frequency by climate zone."
)

# --- borders defined up-front ---
thin  <- fp_border(width = 0.75)
heavy <- fp_border(width = 1.5)

# --- build flextable (bigger, fixed layout, horizontal rules, centered) ---
tbl_data_source <- 
  flextable(df) %>%
  set_header_labels(
    invest_input_name = "InVEST input name",
    source = "Source",
    note = "Note"
  ) %>%
  fontsize(part = "all", size = 8) %>%        # make it larger
  bold(part = "header", bold = TRUE) %>%
  align(align = "left", part = "all") %>%
  valign(val = "top", part = "body") %>%
  padding(padding = 3, part = "all") %>%
  set_table_properties(layout = "fixed", align = "center") %>%  # avoid autoshrink; center table
  # widen columns so text wraps but table looks bigger
  width(j = "invest_input_name", width = 1.5) %>%
  width(j = "source", width = 2.5) %>%
  width(j = "note", width = 2.5) %>%
  # borders: remove all, then add HORIZONTAL only (easier with helpers)
  border_remove() %>%
  hline(i = 1:nrow(df), border = thin,  part = "body") %>%  # between rows
  hline_top(border = heavy, part = "header") %>%  # top horizontal
  hline_bottom(border = heavy, part = "header") %>%  # line under header
  hline_bottom(border = heavy, part = "body")        # bottom horizontal
```

# GEP Table


